// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKD.Domain;

#nullable disable

namespace SKD.Domain.src.Migrations
{
    [DbContext(typeof(SkdContext))]
    partial class SkdContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SKD.Domain.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("app_setting", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Bom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LotPartQuantitiesMatchShipment")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("bom", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ComponentSerialRule")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DcwsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductionStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductionStationId");

                    b.ToTable("component", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ComponentSerial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Original_Serial1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Original_Serial2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Serial1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Serial2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KitComponentId");

                    b.HasIndex("Serial2");

                    b.HasIndex("Serial1", "Serial2");

                    b.ToTable("component_serial", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ComponentStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SaveCDCComponent")
                        .HasColumnType("bit");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("ComponentId", "StationId")
                        .IsUnique();

                    b.ToTable("component_station", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.DcwsResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DcwsSuccessfulSave")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProcessExcptionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComponentSerialId");

                    b.ToTable("dcws_response", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("dealer", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.HandlingUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ShipmentInvoiceId");

                    b.ToTable("handling_unit", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.HandlingUnitReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HandlingUnitId");

                    b.ToTable("handling_unit_received", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KitNo")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("KitNo")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("VIN");

                    b.ToTable("kit", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.KitComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductionStationId");

                    b.HasIndex("KitId", "ComponentId", "ProductionStationId")
                        .IsUnique();

                    b.ToTable("kit_component", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.KitStatusEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventNote")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitStatusEventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("PartnerStatusUpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventDate");

                    b.HasIndex("KitStatusEventTypeId");

                    b.HasIndex("PartnerStatusUpdatedAt");

                    b.HasIndex("RemovedAt");

                    b.HasIndex("KitId", "CreatedAt");

                    b.ToTable("kit_timeline_event", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.KitStatusEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartnerStatusCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PartnerStatusCode")
                        .IsUnique();

                    b.ToTable("kit_timeline_event_type", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.KitVin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("kit_vin", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LotNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PcvId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PcvId");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("LotNo")
                        .IsUnique()
                        .HasFilter("[LotNo] IS NOT NULL");

                    b.HasIndex("PcvId");

                    b.HasIndex("PlantId");

                    b.ToTable("lot", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.LotPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BomQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipmentQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("LotId", "PartId");

                    b.ToTable("lot_part", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.LotPartReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LotPartId");

                    b.ToTable("lot_part_received", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PCV", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelYear")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PcvDriveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvEngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvPaintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvSeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvSubmodelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvTransmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PcvTrimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Series")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PcvDriveId");

                    b.HasIndex("PcvEngineId");

                    b.HasIndex("PcvModelId");

                    b.HasIndex("PcvPaintId");

                    b.HasIndex("PcvSeriesId");

                    b.HasIndex("PcvSubmodelId");

                    b.HasIndex("PcvTransmissionId");

                    b.HasIndex("PcvTrimId");

                    b.ToTable("pcv", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalPartNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PartDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartDesc");

                    b.HasIndex("PartNo")
                        .IsUnique();

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PcvId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PcvId");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("PcvId", "ComponentId")
                        .IsUnique();

                    b.ToTable("pcv_component", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvDrive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_drive", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvEngine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_engine", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_model", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvPaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_paint", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_series", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvSubmodel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_submodel", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvTransmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_transmission", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.PcvTrim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pcv_trim", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartnerPlantCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PartnerPlantType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("plant", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ProductionStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("production_station", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlantId", "Sequence")
                        .IsUnique();

                    b.ToTable("shipment", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ShipmentInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentLotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNo")
                        .IsUnique();

                    b.HasIndex("ShipmentLotId");

                    b.ToTable("shipment_invoice", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ShipmentLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LotId")
                        .IsUnique();

                    b.HasIndex("ShipmentId");

                    b.ToTable("shipment_lot", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.ShipmentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HandlingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("HandlingUnitId", "PartId")
                        .IsUnique()
                        .HasFilter("[HandlingUnitId] IS NOT NULL");

                    b.ToTable("shipment_part", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SKD.Domain.Bom", b =>
                {
                    b.HasOne("SKD.Domain.Plant", "Plant")
                        .WithMany("Boms")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Domain.Component", b =>
                {
                    b.HasOne("SKD.Domain.ProductionStation", "ProductionStation")
                        .WithMany("DefaultStationComponents")
                        .HasForeignKey("ProductionStationId");

                    b.Navigation("ProductionStation");
                });

            modelBuilder.Entity("SKD.Domain.ComponentSerial", b =>
                {
                    b.HasOne("SKD.Domain.KitComponent", "KitComponent")
                        .WithMany("ComponentSerials")
                        .HasForeignKey("KitComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitComponent");
                });

            modelBuilder.Entity("SKD.Domain.ComponentStation", b =>
                {
                    b.HasOne("SKD.Domain.Component", "Component")
                        .WithMany("ComponentStations")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.ProductionStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("SKD.Domain.DcwsResponse", b =>
                {
                    b.HasOne("SKD.Domain.ComponentSerial", "ComponentSerial")
                        .WithMany("DcwsResponses")
                        .HasForeignKey("ComponentSerialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentSerial");
                });

            modelBuilder.Entity("SKD.Domain.HandlingUnit", b =>
                {
                    b.HasOne("SKD.Domain.ShipmentInvoice", "ShipmentInvoice")
                        .WithMany("HandlingUnits")
                        .HasForeignKey("ShipmentInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipmentInvoice");
                });

            modelBuilder.Entity("SKD.Domain.HandlingUnitReceived", b =>
                {
                    b.HasOne("SKD.Domain.HandlingUnit", "HandlingUnit")
                        .WithMany("Received")
                        .HasForeignKey("HandlingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandlingUnit");
                });

            modelBuilder.Entity("SKD.Domain.Kit", b =>
                {
                    b.HasOne("SKD.Domain.Dealer", "Dealer")
                        .WithMany("Kits")
                        .HasForeignKey("DealerId");

                    b.HasOne("SKD.Domain.Lot", "Lot")
                        .WithMany("Kits")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("SKD.Domain.KitComponent", b =>
                {
                    b.HasOne("SKD.Domain.Component", "Component")
                        .WithMany("KitComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.Kit", "Kit")
                        .WithMany("KitComponents")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.ProductionStation", "ProductionStation")
                        .WithMany("KitComponents")
                        .HasForeignKey("ProductionStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Kit");

                    b.Navigation("ProductionStation");
                });

            modelBuilder.Entity("SKD.Domain.KitStatusEvent", b =>
                {
                    b.HasOne("SKD.Domain.Kit", "Kit")
                        .WithMany("KitStatusEvents")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.KitStatusEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("KitStatusEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("SKD.Domain.KitVin", b =>
                {
                    b.HasOne("SKD.Domain.Kit", "Kit")
                        .WithMany("KitVins")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("SKD.Domain.Lot", b =>
                {
                    b.HasOne("SKD.Domain.Bom", "Bom")
                        .WithMany("Lots")
                        .HasForeignKey("BomId");

                    b.HasOne("SKD.Domain.PCV", "Pcv")
                        .WithMany("Lots")
                        .HasForeignKey("PcvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKD.Domain.Plant", "Plant")
                        .WithMany("Lots")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("Pcv");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Domain.LotPart", b =>
                {
                    b.HasOne("SKD.Domain.Lot", "Lot")
                        .WithMany("LotParts")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.Part", "Part")
                        .WithMany("LotParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("SKD.Domain.LotPartReceived", b =>
                {
                    b.HasOne("SKD.Domain.LotPart", "LotPart")
                        .WithMany("Received")
                        .HasForeignKey("LotPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LotPart");
                });

            modelBuilder.Entity("SKD.Domain.PCV", b =>
                {
                    b.HasOne("SKD.Domain.PcvDrive", "PcvDrive")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvDriveId");

                    b.HasOne("SKD.Domain.PcvEngine", "PcvEngine")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvEngineId");

                    b.HasOne("SKD.Domain.PcvModel", "PcvModel")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvModelId");

                    b.HasOne("SKD.Domain.PcvPaint", "PcvPaint")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvPaintId");

                    b.HasOne("SKD.Domain.PcvSeries", "PcvSeries")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvSeriesId");

                    b.HasOne("SKD.Domain.PcvSubmodel", "PcvSubmodel")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvSubmodelId");

                    b.HasOne("SKD.Domain.PcvTransmission", "PcvTransmission")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvTransmissionId");

                    b.HasOne("SKD.Domain.PcvTrim", "PcvTrim")
                        .WithMany("Pcvs")
                        .HasForeignKey("PcvTrimId");

                    b.Navigation("PcvDrive");

                    b.Navigation("PcvEngine");

                    b.Navigation("PcvModel");

                    b.Navigation("PcvPaint");

                    b.Navigation("PcvSeries");

                    b.Navigation("PcvSubmodel");

                    b.Navigation("PcvTransmission");

                    b.Navigation("PcvTrim");
                });

            modelBuilder.Entity("SKD.Domain.PcvComponent", b =>
                {
                    b.HasOne("SKD.Domain.Component", "Component")
                        .WithMany("PcvComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKD.Domain.PCV", "Pcv")
                        .WithMany("PcvComponents")
                        .HasForeignKey("PcvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Pcv");
                });

            modelBuilder.Entity("SKD.Domain.Shipment", b =>
                {
                    b.HasOne("SKD.Domain.Plant", "Plant")
                        .WithMany("Shipments")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SKD.Domain.ShipmentInvoice", b =>
                {
                    b.HasOne("SKD.Domain.ShipmentLot", "ShipmentLot")
                        .WithMany("Invoices")
                        .HasForeignKey("ShipmentLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShipmentLot");
                });

            modelBuilder.Entity("SKD.Domain.ShipmentLot", b =>
                {
                    b.HasOne("SKD.Domain.Lot", "Lot")
                        .WithMany("ShipmentLots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SKD.Domain.Shipment", "Shipment")
                        .WithMany("ShipmentLots")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("SKD.Domain.ShipmentPart", b =>
                {
                    b.HasOne("SKD.Domain.HandlingUnit", "HandlingUnit")
                        .WithMany("Parts")
                        .HasForeignKey("HandlingUnitId");

                    b.HasOne("SKD.Domain.Part", "Part")
                        .WithMany("ShipmentParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandlingUnit");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("SKD.Domain.Bom", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("SKD.Domain.Component", b =>
                {
                    b.Navigation("ComponentStations");

                    b.Navigation("KitComponents");

                    b.Navigation("PcvComponents");
                });

            modelBuilder.Entity("SKD.Domain.ComponentSerial", b =>
                {
                    b.Navigation("DcwsResponses");
                });

            modelBuilder.Entity("SKD.Domain.Dealer", b =>
                {
                    b.Navigation("Kits");
                });

            modelBuilder.Entity("SKD.Domain.HandlingUnit", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("Received");
                });

            modelBuilder.Entity("SKD.Domain.Kit", b =>
                {
                    b.Navigation("KitComponents");

                    b.Navigation("KitStatusEvents");

                    b.Navigation("KitVins");
                });

            modelBuilder.Entity("SKD.Domain.KitComponent", b =>
                {
                    b.Navigation("ComponentSerials");
                });

            modelBuilder.Entity("SKD.Domain.Lot", b =>
                {
                    b.Navigation("Kits");

                    b.Navigation("LotParts");

                    b.Navigation("ShipmentLots");
                });

            modelBuilder.Entity("SKD.Domain.LotPart", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("SKD.Domain.PCV", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("PcvComponents");
                });

            modelBuilder.Entity("SKD.Domain.Part", b =>
                {
                    b.Navigation("LotParts");

                    b.Navigation("ShipmentParts");
                });

            modelBuilder.Entity("SKD.Domain.PcvDrive", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvEngine", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvModel", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvPaint", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvSeries", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvSubmodel", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvTransmission", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.PcvTrim", b =>
                {
                    b.Navigation("Pcvs");
                });

            modelBuilder.Entity("SKD.Domain.Plant", b =>
                {
                    b.Navigation("Boms");

                    b.Navigation("Lots");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("SKD.Domain.ProductionStation", b =>
                {
                    b.Navigation("DefaultStationComponents");

                    b.Navigation("KitComponents");
                });

            modelBuilder.Entity("SKD.Domain.Shipment", b =>
                {
                    b.Navigation("ShipmentLots");
                });

            modelBuilder.Entity("SKD.Domain.ShipmentInvoice", b =>
                {
                    b.Navigation("HandlingUnits");
                });

            modelBuilder.Entity("SKD.Domain.ShipmentLot", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
